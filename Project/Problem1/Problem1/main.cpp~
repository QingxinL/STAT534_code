/*
 This program sorts the elements of a given vector.
*/

#include "vectors.h"

//this is for the function qsort
#include <stdlib.h>

//GLOBAL VARIABLE
double* vector = NULL;

int qsortcompareIncreasing(const void * a, const void * b)
{
	double ia = *(double*)a;
	double ib = *(double*)b;
	
	if(ia<ib) return(-1);
	if(ia>ib) return(1);
	return(0);
}

int qsortcompareDecreasing(const void * a, const void * b)
{
	double ia = *(double*)a;
	double ib = *(double*)b;
	
	if(ia<ib) return(1);
	if(ia>ib) return(-1);
	return(0);
}

int qsortcompare(const void * a, const void * b)
{
	int ia = *(int*)a;
	int ib = *(int*)b;
	
	if(vector[ia]<vector[ib]) return(-1);
	if(vector[ia]>vector[ib]) return(1);
	return(0);
}

int main()
{
	int i;
	int n = 100;
	
	char InputFile[] = "mybandedmatrix.txt";

	//initialise a vector of length n
	vector = allocvector(n);
	
	readvector(n,vector,InputFile);
 
        printf("Original vector\n");
        printvector(vector,n);
        printf("\n\n");

	//sort in increasing order
        //create a copy of the vector
	double* vectorIncreasing = allocvector(n);
        for(i=0;i<n;i++)
	{
	  vectorIncreasing[i] = vector[i];
        }
        //now sort
	qsort(vectorIncreasing,n,sizeof(double),qsortcompareIncreasing);

        printf("Vector sorted in increasing order\n");
        printvector(vectorIncreasing,n);
        printf("\n\n");

        //sort in decreasing order
        //create a copy of the vector
	double* vectorDecreasing = allocvector(n);
        for(i=0;i<n;i++)
	{
	  vectorDecreasing[i] = vector[i];
        }
        //now sort
	qsort(vectorDecreasing,n,sizeof(double),qsortcompareDecreasing);

        printf("Vector sorted in decreasing order\n");
        printvector(vectorDecreasing,n);
        printf("\n\n");

        //vector of indices
        int* indices = new int[n];
        for(i=0;i<n;i++)
	{
	   indices[i] = i;
        }
        
        //obtain the indices that will order the elements
        //of vector in an increasing order
        qsort(indices,n,sizeof(int),qsortcompare);

        printf("Elements of vector in increasing order\n");
        for(i=0;i<n;i++)
	{
	   printf("%d\t%.3lf\n",indices[i],vector[indices[i]]);
        }
	
	//free the memory
	freevector(vector);
	freevector(vectorIncreasing);
	freevector(vectorDecreasing);
        delete[] indices; indices = NULL;	

	return(1);
}
